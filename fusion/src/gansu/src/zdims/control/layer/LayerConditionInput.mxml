<?xml version="1.0" encoding="utf-8"?> 
<!-- 条件查询窗口 -->
<IMSWindow xmlns="zdims.control.*" implements="zdims.interfaces.control.IConditionInput"  xmlns:mx="http://www.adobe.com/2006/mxml"  layout="absolute" x="200" y="200"  width="320" height="404" title="输入查询条件" fontSize="12" borderThicknessLeft="2" borderThicknessRight="2" creationComplete="init()">
	<mx:Button x="10" y="117" label="+" width="74" height="22" click="onBtnClick(event)"/>
	<mx:Button x="84" y="117" label="-" width="74" height="22" click="onBtnClick(event)"/>
	<mx:Button x="158" y="117" label="*" width="74" height="22" click="onBtnClick(event)"/>
	<mx:Button x="232" y="117" label="/" width="74" height="22" click="onBtnClick(event)"/>
	<mx:Button x="10" y="139" label="&gt;=" width="74" height="22" click="onBtnClick(event)"/>
	<mx:Button x="84" y="139" label="&lt;=" width="74" height="22" click="onBtnClick(event)"/>
	<mx:Button x="158" y="139" label="&gt;" width="74" height="22" click="onBtnClick(event)"/>
	<mx:Button x="232" y="139" label="&lt;" width="74" height="22" click="onBtnClick(event)"/>
	<mx:Button x="10" y="161" label="=" width="74" height="22" click="onBtnClick(event)"/>
	<mx:Button x="84" y="161" label="!=" width="74" height="22" click="onBtnClick(event)"/>
	<mx:Button x="158" y="161" label="and" width="74" height="22" click="onBtnClick(event)"/>
	<mx:Button x="232" y="161" label="or" width="74" height="22" click="onBtnClick(event)"/>
	<mx:Button x="10" y="183" label="not" width="74" height="22" click="onBtnClick(event)"/>
	<mx:Button x="84" y="183" label="like" width="74" height="22" click="onBtnClick(event)"/>
	<mx:Button x="158" y="183" label="is null" width="74" height="22" click="onBtnClick(event)"/>
	<mx:Button x="232" y="183" label="%" width="74" height="22" click="onBtnClick(event)"/>
	<mx:TextArea id="conditionText" x="10" y="245" width="296" height="48"/>
	<mx:Button x="39" y="314" label="查询" width="74" height="22" click="submit()"/>
	<mx:Button x="203" y="314" label="关闭" width="74" height="22" click="close()"/>
	<mx:ComboBox x="97" y="86" width="209" id="fieldList" change="onSelectField()"></mx:ComboBox>
	<mx:Label x="10" y="89" text="选择属性字段："/>
	<mx:Button x="121" y="314" label="清空" width="74" height="22" click="clearText()"/>
	<mx:Label x="10" y="221" text="请输入查询条件："/>
	<mx:Script>
		<![CDATA[
			import zdims.draw.IMSCanvas;
			import zdims.map.VectorLayer;
			import zdims.map.VectorMapDoc;
			import zdims.map.IMSMap;
			import Mapgis7.WebService.BasLib.*;
			import mx.events.FlexEvent;
			import mx.events.DragEvent;
			import Mapgis7.WebService.BasLib.IWebGeometry;
			import mx.controls.Alert;
			import Mapgis7.WebService.BasLib.ESelectionType;
			import mx.controls.Button;
			import mx.core.UIComponent;
			import zdims.control.*;
			import sjd.managers.ResizeManager;
			
			private var _geoObj:Object;
			private var _selectType:String = ESelectionType.Condition;
			private var _isMouseDown:Boolean = false;
			public var layerQuery:LayerDataViewer;
			[Inspectable(category="MapGisIMS")]
			public function set layerDataViewer(viewer:LayerDataViewer):void
			{
				this.layerQuery=viewer;
			}
			[Inspectable(category="MapGisIMS")]
			public function get layerDataViewer():LayerDataViewer
			{
				return this.layerQuery;
			}
			
				/**
			 * 点击条件查询处理事件
			 * @param e
			 * 
			 */
			public function selectByPointAndCon(e:Event):void
			{
				this.setQueryGeoObj(this.imsmap.graphicCanvas.getSelectedDot());
				this.setSelectType(ESelectionType.Both);
				this.visible=true;
			}

			

			/**
			 * 线条件查询处理事件
			 * @param e
			 *
			 */
			public function selectByLineAndCon(e:Event):void
			{
				this.setQueryGeoObj(this.imsmap.graphicCanvas.getSelectedLine());
				this.setSelectType(ESelectionType.Both);
				this.visible=true;
			}

		

			/**
			 * 多边形+条件组合查询处理事件
			 * @param e
			 *
			 */
			public function selectByPolygonAndCon(e:Event):void
			{
				this.setQueryGeoObj(this.imsmap.graphicCanvas.getSelectedPolygon());
				this.setSelectType(ESelectionType.Both);
				this.visible=true;
			}

		

			/**
			 * 矩形+条件组合查询处理事件
			 * @param e
			 *
			 */
			public function selectByRectAndCon(e:Event):void
			{
				this.setQueryGeoObj(this.imsmap.graphicCanvas.getSelectedRect());
				this.setSelectType(ESelectionType.Both);
				this.visible=true;
			}



			/**
			 * 圆范围+条件组合查询处理事件
			 * @param e
			 *
			 */
			public function selectByCircleAndCon(e:Event):void
			{
				this.setQueryGeoObj(this.imsmap.graphicCanvas.getSelectedCircle());
				this.setSelectType(ESelectionType.Both);
				this.visible=true;
			}

			/**
			 * 属性条件查询处理事件
			 *
			 */
			public function selectByAttCondition():void
			{
				this.setQueryGeoObj(null);
				this.setSelectType(ESelectionType.Condition);
				this.visible=true;
			}
			/**
			 * 设置查询条件
			 */ 
			public function setQueryGeoObj(value:Object):void
			{
				this._geoObj = value;
			}
			/**
			 * 设置查询类型
			 */ 
			public function setSelectType(value:String):void
			{
				this._selectType = value;
			}
			
			/**
			 * 清除条件文本
			 */ 
			public function clearText():void
			{
				this.conditionText.text = "";
			}
			/**
			 * 关闭窗口
			 */ 
			public override function close():void
			{
				super.close();
				this.layerList.dataProvider = null;
				this.layerList.addEventListener(MouseEvent.MOUSE_OVER,getLayer);
			}
			/**
			 * 窗口初始化
			 */ 
			public override function init():void
			{
				super.init();
				this.layerList.addEventListener(MouseEvent.MOUSE_OVER,getLayer);
			}
			/**
			 * 设置条件文本
			 */ 
			public function onBtnClick(e:Event):void
			{
				var btn:Button = Button(e.target);
				this.conditionText.text += " " + btn.label;
				this.conditionText.setFocus();
			}
			/**
			 * 获取图层名称
			 */ 
			public function getLayer(e:Event):void
			{
				if(this.imsmap.activeLayerObj != null && (this.gdbList.dataProvider as Array)==null)
				{
					var vector:VectorLayer = this.imsmap.activeLayerObj;
					
					if(vector.layerObj == null || vector.layerObj.LayerAccessInfo.length == 0) return;
					
					var layerInfoArr:Array = vector.layerObj.LayerAccessInfo;
					var layerName:Array = new Array();
					/* var cnt:int=0; */
					for(var j:int=0;j<layerInfoArr.length;j++)
					{
						var layerInfo:CLayerAccessInfo=layerInfoArr[j];
						layerName[j]=layerInfo.GdbInfo.GDBSvrName+"_"+layerInfo.GdbInfo.GDBName+"_"+j
						/* for(var i:int = 0;i < layerInfo.LayerInfoList.length;i++)
						{
							layerName[cnt] = CLayerInfo(layerInfo.LayerInfoList[i]).LayerDataName;
							cnt++;
						}  */
					}
					this.gdbList.dataProvider = layerName;
					this.gdbList.removeEventListener(MouseEvent.MOUSE_OVER,getLayer);
					this.gdbList.selectedIndex = this.imsmap.activeLayerObj.activeGdbIndex;
					changeGDB(); 
				}
			}
			/**
			 * 查询触发函数
			 */ 
			public function submit():void
			{
				if(this.conditionText.text.replace(" ","").length == 0)
				{
					Alert.show("请输入查询条件。","提示");
					return;
				}
				if(this._selectType != ESelectionType.Condition&&this._geoObj == null)
				{
					Alert.show("当前查询需要空间范围对象，请选取要查询的空间范围。","提示");
					return;
				}
				var mapsel:CLayerSelectParam = new CLayerSelectParam();
		        var websel:CWebSelectParam = new CWebSelectParam();
		        
		        websel.CompareRectOnly = this.imsmap.activeLayerObj.compareRectOnly;
		        websel.Geometry = this._geoObj;
		        if(this._geoObj != null) 
		        {
       				websel.GeomType=IWebGeometry(this._geoObj).GetGeomType();	
		        }
		        websel.MustInside = this.imsmap.activeLayerObj.mustInside;
		        websel.NearDistance = this.imsmap.activeLayerObj.nearDistanse;
		        websel.SelectionType = this._selectType;
		        websel.WhereClause = this.conditionText.text;
		        mapsel.WebSelectParam = websel;
		        mapsel.PageCount = 0;
		        
				if(this.layerQuery != null)
		        {
					this.layerQuery.setLastSelectParam(mapsel);
		        }
				this.imsmap.activeLayerObj.layerSelectAndGetAtt(mapsel,this.selectCallback);
			}
			/**
			 * 查询结果处理事件 
			 * @param e
			 * 
			 */		
			public function selectCallback(e:Event):void
			{
				if (this.layerQuery != null)
				{
					this.layerQuery.showResult(this.imsmap.activeLayerObj.onLayerSelectAndGetAtt(e));
				}
			}
			/**
			 * 改变图层触发函数，获取图层属性结构
			 */ 
			public function changeLayer():void
			{
				var gdbIndex:int = this.gdbList.selectedIndex;
				var layerIndex:int =this.layerList.selectedIndex;
				if(gdbIndex < 0||layerIndex<0) return;
				var obj:CSetLayerIndex = new CSetLayerIndex();
				obj.GdbIndex = gdbIndex;
				obj.LayerIndex = layerIndex;
				this.imsmap.activeLayerObj.getLayerAttStruct(obj,getAttStructCallBack);
			}
			/**
			 * 改变gdb触发函数，获取图层属性结构
			 */ 
			public function changeGDB():void
			{
				var index:int = this.gdbList.selectedIndex;
				if(index < 0) return;
				var vector:VectorLayer = this.imsmap.activeLayerObj;
				
				if(vector.layerObj == null || vector.layerObj.LayerAccessInfo.length == 0) return;
				
				var layerInfo:CLayerAccessInfo = vector.layerObj.LayerAccessInfo[index];
				var layerName:Array = new Array();
				for(var j:int=0;j<layerInfo.LayerInfoList.length;j++)
				{
					var singlelayer:CLayerInfo = layerInfo.LayerInfoList[j];
					layerName[j]=singlelayer.LayerDataName;
				}
				this.layerList.dataProvider = layerName;
				this.layerList.removeEventListener(MouseEvent.MOUSE_OVER,getLayer);
				this.layerList.selectedIndex =this.imsmap.activeLayerObj.activeLayerIndex;
				changeLayer();
			}
			
			/**
			 * 获取属性结构回调函数
			 */ 
			private function getAttStructCallBack(e:Event):void
			{
				var attStru:CAttStruct = this.imsmap.activeLayerObj.onGetLayerAttStruct(e);
				this.fieldList.dataProvider = attStru.FldName;
			}
			/**
			 * 设置查询条件
			 */ 
			public function onSelectField():void
			{
				this.conditionText.text += this.fieldList.selectedLabel;
			}
			
		]]>
	</mx:Script>
	<mx:ComboBox x="97" y="51" width="209" id="layerList" change="changeLayer()"></mx:ComboBox>
	<mx:Label x="10" y="54" text="选择图层："/>
	<mx:ComboBox x="97" y="15" width="209" id="gdbList" change="changeGDB()"></mx:ComboBox>
	<mx:Label x="10" y="18" text="选择GDB："/>
</IMSWindow>
